# install basics

apt update
apt upgrade
apt install curl git ufw nano htop python3-venv python3-pip libxml2-dev libxslt-dev python-dev nginx python3-dev build-essential libssl-dev libffi-dev python3-setuptools -y
python3 -m pip install wheel waitress requests

# change ssh port
nano /etc/ssh/sshd_config
service ssh restart

# configure firewall

ufw allow 5000 # dev server port
ufw allow 8472 # ssh port
ufw enable

# install dgraph with systemd service

curl https://get.dgraph.io -sSf | bash -s -- --systemd

# in some cases need to fix systemd config:
https://discuss.dgraph.io/t/automatic-download-installation-with-systemd-throws-error/15080/2

# to set systemd manually, do the following

## Install Dgraph 

curl https://get.dgraph.io -sSf | bash

## Create Dgraph user
groupadd --system dgraph
useradd --system -d /var/lib/dgraph -s /bin/false -g dgraph dgraph

## Create Directories & set permissions
mkdir -p /var/lib/dgraph/{p,w,zw}
mkdir -p /var/log/dgraph

mkdir /mnt/public/backup

chown -R dgraph:dgraph /var/{lib,log}/dgraph
chown -R dgraph:dgraph /mnt/public/backup

## Create systemd service files
nano /etc/systemd/system/dgraph-zero.service
nano /etc/systemd/system/dgraph-alpha.service

## Reload Daemon

systemctl daemon-reload

## Enable services
systemctl enable dgraph-zero
systemctl status dgraph-zero





# if this fails, try using docker
docker run -it -p 5080:5080 -p 6080:6080 -p 8080:8080 -p 9080:9080 -p 8000:8000 -v ~/dgraph:/dgraph --name dgraph dgraph/standalone:v21.03.0


# add new user

adduser ava
sudo usermod -a -G www-data ava

# login as new user

# create venv
python3 -m venv environments/wp3

# get source from github
git clone ....

# install python dependencies
source environments/wp3/bin/activate

python -m pip install wheel waitress
python -m pip install -r requirements.txt

# set app secret key
export meteor_SECRETKEY=123456789

# setup dgraph schema
python tools/setschema.py

# upload sample data
python tools/sample_data.py

# Run flask with waitress to test installation
waitress-serve --call --listen "*:5000" 'meteor:create_app'

## this command only uses ip4
waitress-serve --call --listen "0.0.0.0:5000" 'meteor:create_app'


# run flask as systemd service
# requires root access
sudo nano /etc/systemd/system/meteor.service
sudo systemctl enable meteor
sudo service meteor start

# nginx config:

/etc/nginx/sites-available/meteor

```
server {
        if ($http_user_agent ~* "SemrushBot|Semrush|AhrefsBot|Barkrowler|DotBot|DataForSeoBot|Adsbot|IonCrawl|YandexBot") {
                return 403;
                }
        listen 80;
        server_name meteor.opted.eu wp3.opted.eu a493-server1.pub.univie.ac.at;
        return 301 https://meteor.opted.eu$request_uri;
        }

server {
        if ($http_user_agent ~* "SemrushBot|Semrush|AhrefsBot|Barkrowler|DotBot|DataForSeoBot|Adsbot|IonCrawl|YandexBot") {
                return 403;
        }
        listen 443 ssl;
        ssl_certificate /etc/ssl/wp3_opted_eu_cert.cer;
        ssl_certificate_key /etc/ssl/private/wp3.opted.eu.key;
        server_name wp3.opted.eu a493-server1.pub.univie.ac.at;
        return 301 https://meteor.opted.eu$request_uri;
        }

server {
        if ($http_user_agent ~* "SemrushBot|Semrush|AhrefsBot|Barkrowler|DotBot|DataForSeoBot|Adsbot|IonCrawl|YandexBot") {
                return 403;
        }
        listen 443 ssl;
        ssl_certificate /etc/ssl/meteor_opted_eu_cert.cer;
        ssl_certificate_key /etc/ssl/private/wp3.opted.eu.key;
        server_name meteor.opted.eu;

        location / {
                include proxy_params;
                proxy_pass http://unix:/home/ava/wp3inventory/meteor.sock;
        }

        location ^~ /static/ {
                include /etc/nginx/mime.types;
                root /home/ava/wp3inventory/meteor;
        }

        location /favicon.ico {
                alias /home/ava/wp3inventory/meteor/static/favicon.ico;
        }

}
```
